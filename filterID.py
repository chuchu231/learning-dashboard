import pandas as pd

def assign_idsystem(file_path, conn):
    print("üì• ƒêang ƒë·ªçc file Excel...")

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel b·∫±ng pandas
    student_df = pd.read_excel(file_path, sheet_name='Student')
    activity_df = pd.read_excel(file_path, sheet_name='StudentActivity')

    print("üìÑ C·ªôt trong sheet Student:", student_df.columns.tolist())
    print("üìÑ C·ªôt trong sheet StudentActivity:", activity_df.columns.tolist())

    # Tr√≠ch xu·∫•t ID t·ª´ m√¥ t·∫£
    print("üîç ƒêang tr√≠ch xu·∫•t ID t·ª´ m√¥ t·∫£ ho·∫°t ƒë·ªông...")
    activity_df['ExtractedID'] = activity_df['Descript'].str.extract(r"The user with id\s*'(\d+)'")[0].astype(float)

    # T·∫°o √°nh x·∫° FullName ‚Üí list c√°c ID duy nh·∫•t
    print("üîÑ T·∫°o √°nh x·∫° t·ª´ FullName sang IDSystem...")
    id_mapping = activity_df.dropna(subset=['FullName']) \
                            .groupby('FullName')['ExtractedID'] \
                            .apply(lambda x: list(x.dropna().unique()))

    # G√°n IDSystem v√†o student_df
    student_df['IDSystem'] = student_df['FullName'].map(id_mapping) \
        .apply(lambda ids: ids[0] if isinstance(ids, list) and len(ids) > 0 else None)

    # Gi·∫£i quy·∫øt tr√πng l·∫∑p IDSystem trong c√πng m·ªôt FullName
    print("üîÑ Ki·ªÉm tra v√† lo·∫°i b·ªè IDSystem tr√πng trong c√πng nh√≥m...")
    def assign_unique_ids(group):
        seen_ids = set()
        for idx in group.index:
            current_id = group.at[idx, 'IDSystem']
            if pd.notna(current_id) and current_id in seen_ids:
                group.at[idx, 'IDSystem'] = None
            else:
                seen_ids.add(current_id)
        return group

    student_df = student_df.groupby('FullName', group_keys=False).apply(assign_unique_ids)

    print("üìä 5 d√≤ng ƒë·∫ßu sau khi g√°n IDSystem:")
    cols = [c for c in ['StudentID', 'FullName', 'IDSystem'] if c in student_df.columns]
    print(student_df[cols].head().to_string(index=False))

    # C·∫≠p nh·∫≠t v√†o SQL Server
    print("üíæ ƒêang c·∫≠p nh·∫≠t v√†o SQL Server...")
    cursor = conn.cursor()

    cursor.execute("SELECT StudentID FROM Student")
    existing_ids = {row[0] for row in cursor.fetchall()}

    update_data = []
    for _, row in student_df.iterrows():
        sid = row.get('StudentID')
        ids = row.get('IDSystem')
        if pd.isna(sid) or str(sid).strip() not in existing_ids:
            continue
        try:
            update_data.append((
                int(ids) if pd.notna(ids) else None,
                str(sid).strip()
            ))
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω d√≤ng {row.to_dict()} ‚Üí {e}")

    if not update_data:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d√≤ng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    update_query = """
    UPDATE [dbo].[Student]
    SET IDSystem = ?
    WHERE TRIM(StudentID) = TRIM(?)
    """
    try:
        cursor.executemany(update_query, update_data)
        conn.commit()
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {cursor.rowcount} b·∫£n ghi.")
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t v√†o SQL Server: {e}")

    # In 5 d√≤ng ƒë·∫ßu sau c·∫≠p nh·∫≠t
    try:
        cursor.execute("SELECT TOP 5 StudentID, FullName, IDSystem FROM Student")
        print("‚úÖ 5 b·∫£n ghi ƒë·∫ßu ti√™n sau c·∫≠p nh·∫≠t:")
        for r in cursor.fetchall():
            print(r)
    except:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ truy v·∫•n b·∫£ng Student ƒë·ªÉ in k·∫øt qu·∫£.")
