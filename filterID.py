import pandas as pd
import dask.dataframe as dd


def assign_idsystem(file_path, conn):
    print("ƒêang ƒë·ªçc file Excel...")

    # ƒê·ªçc sheet Student v√† StudentActivity b·∫±ng pandas
    student_excel = pd.read_excel(file_path, sheet_name='Student')
    activity_excel = pd.read_excel(file_path, sheet_name='StudentActivity')

    # Chuy·ªÉn sang Dask
    student_df = dd.from_pandas(student_excel, npartitions=4)
    activity_df = dd.from_pandas(activity_excel, npartitions=4)

    print("C·ªôt trong sheet Student:", student_df.columns.tolist())
    print("C·ªôt trong sheet StudentActivity:", activity_df.columns.tolist())

    # Tr√≠ch xu·∫•t ID t·ª´ Descript
    print("ƒêang tr√≠ch xu·∫•t ID t·ª´ m√¥ t·∫£ ho·∫°t ƒë·ªông...")
    activity_df['ExtractedID'] = activity_df['Descript'].str.extract(r"The user with id\s*'(\d+)'")[0].astype(float)

    # T√≠nh to√°n activity_df
    activity_pd = activity_df.compute()

    # T·∫°o √°nh x·∫° FullName ‚Üí list ID
    id_mapping = {}
    for name, group in activity_pd.groupby('FullName'):
        if pd.isna(name):
            continue
        ids = group['ExtractedID'].dropna().unique()
        id_mapping[name] = list(ids)

    print("M·ªôt v√†i √°nh x·∫° ƒë·∫ßu ti√™n:")
    for k in list(id_mapping.keys())[:5]:
        print(f"{k} ‚Üí {id_mapping[k]}")

    # Map IDSystem cho t·ª´ng sinh vi√™n
    print("ƒêang g√°n IDSystem...")
    id_series = pd.Series(id_mapping)

    if 'FullName' not in student_df.columns:
        raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt 'FullName' trong d·ªØ li·ªáu Student.")

    student_df['IDSystem'] = student_df['FullName'].map(id_series, meta=('IDSystem', 'object')).apply(
        lambda ids: ids[0] if isinstance(ids, list) and len(ids) > 0 else None,
        meta=('IDSystem', 'float')
    )

    # T√≠nh to√°n student_df th√†nh pandas ƒë·ªÉ x·ª≠ l√Ω nh√≥m
    student_pd = student_df.compute()

    # Gi·∫£i quy·∫øt tr√πng IDSystem
    def assign_unique_ids(group):
        seen_ids = set()
        group = group.copy()
        mask = group['IDSystem'].notna()
        for idx in group[mask].index:
            current_id = group.at[idx, 'IDSystem']
            if current_id not in seen_ids:
                seen_ids.add(current_id)
            else:
                group.at[idx, 'IDSystem'] = None
        return group

    student_pd = student_pd.groupby('FullName', group_keys=False).apply(assign_unique_ids)

    print("5 d√≤ng ƒë·∫ßu sau khi g√°n IDSystem:")
    cols_to_show = [col for col in ['StudentID', 'FullName', 'IDSystem'] if col in student_pd.columns]
    print(student_pd[cols_to_show].to_string(index=False))

    # C·∫≠p nh·∫≠t v√†o SQL Server
    print("üîÑ ƒêang c·∫≠p nh·∫≠t SQL Server...")
    cursor = conn.cursor()

    cursor.execute("SELECT StudentID FROM Student")
    existing_ids = [row[0] for row in cursor.fetchall()]

    update_data = []
    for _, row in student_pd.iterrows():
        if 'StudentID' not in row or pd.isna(row['StudentID']):
            continue
        try:
            update_row = (
                int(row['IDSystem']) if pd.notna(row['IDSystem']) else None,
                str(row['StudentID']).strip()
            )
            update_data.append(update_row)
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω d√≤ng: {row.to_dict()} ‚Üí {e}")

    if not update_data:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    update_query = """
    UPDATE [dbo].[Student]
    SET IDSystem = ?
    WHERE TRIM(StudentID) = TRIM(?)
    """
    try:
        cursor.executemany(update_query, update_data)
        conn.commit()
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {cursor.rowcount} b·∫£n ghi.")
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t v√†o SQL Server: {e}")
        raise

    # In k·∫øt qu·∫£
    try:
        cursor.execute("SELECT TOP 5 StudentID, FullName, IDSystem FROM Student")
        rows = cursor.fetchall()
        print("‚úÖ 5 b·∫£n ghi ƒë·∫ßu ti√™n sau c·∫≠p nh·∫≠t:")
        for r in rows:
            print(r)
    except:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ truy v·∫•n b·∫£ng Student ƒë·ªÉ in k·∫øt qu·∫£.")

